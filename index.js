const { VK, Keyboard } = require("vk-io");
const db = require("./db.json");

const vk = new VK({
	token: process.env.TOKEN
});
vk.updates.use(async (context, next) => {

    if (context.is("message") && context.isOutbox){
        return;
    }

    if (!db[context.senderId]) {
    	let user = await vk.api.users.get({
    		user_id: context.senderId
    	});
        db[context.senderId] = {
            ref: 0
        };
    }

    context.user = db[context.senderId];

    try {
        await next();
    } catch (err) { console.error(err) }
});
vk.updates.hear(/–Ω–∞—á–∞—Ç—å/i, async (context) => (
	await context.send(
`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!

–ó–∞—Ä–∞–±–æ—Ç–∞–π 1—Ä –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ üí∏
	
–ü–æ–≤—ã—à–∞–π —É—Ä–æ–≤–µ–Ω—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ–≥—Ä–µ—Å—Å", —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ`), {
	keyboard:
	Keyboard.keyboard([
			[
					Keyboard.textButton({
							label: 'üî• –ü—Ä–æ–≥—Ä–µ—Å—Å',
							color: Keyboard.PRIMARY_COLOR
					}),
					Keyboard.textButton({
							label: 'üè° –ü—Ä–æ—Ñ–∏–ª—å',
							color: Keyboard.PRIMARY_COLOR
					}),
					Keyboard.textButton({
							label: '‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞',
							color: Keyboard.PRIMARY_COLOR
					}),
			]])
})

);

vk.updates.start().catch(console.error);